{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridFooterPlaceholder, GridHeader, GridRoot } from '../components';\nimport { GridContextProvider } from '../context/GridContextProvider';\nimport { useDataGridComponent } from './useDataGridComponent';\nimport { useDataGridProps, DATA_GRID_PROPS_DEFAULT_VALUES } from './useDataGridProps';\nimport { DataGridVirtualScroller } from '../components/DataGridVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DataGridRaw = /*#__PURE__*/React.forwardRef(function DataGrid(inProps, ref) {\n  const props = useDataGridProps(inProps);\n  const privateApiRef = useDataGridComponent(props.apiRef, props);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    privateApiRef: privateApiRef,\n    props: props,\n    children: /*#__PURE__*/_jsxs(GridRoot, _extends({\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref\n    }, props.forwardedProps, {\n      children: [/*#__PURE__*/_jsx(GridHeader, {}), /*#__PURE__*/_jsx(GridBody, {\n        VirtualScrollerComponent: DataGridVirtualScroller\n      }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n    }))\n  });\n});\n/**\r\n * Demos:\r\n * - [DataGrid](https://mui.com/x/react-data-grid/demo/)\r\n *\r\n * API:\r\n * - [DataGrid API](https://mui.com/x/api/data-grid/data-grid/)\r\n */\nexport const DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\n\n/**\r\n * Remove at v7\r\n * @deprecated\r\n */\nexport const SUBMIT_FILTER_STROKE_TIME = DATA_GRID_PROPS_DEFAULT_VALUES.filterDebounceMs;\n\n/**\r\n * Remove at v7\r\n * @deprecated\r\n */\nexport const SUBMIT_FILTER_DATE_STROKE_TIME = DATA_GRID_PROPS_DEFAULT_VALUES.filterDebounceMs;\nDataGridRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.\r\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n  /**\r\n   * The label of the grid.\r\n   */\n  'aria-label': PropTypes.string,\n  /**\r\n   * The id of the element containing a label for the grid.\r\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\r\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\r\n   * @default false\r\n   */\n  autoHeight: PropTypes.bool,\n  /**\r\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\r\n   * @default false\r\n   */\n  autoPageSize: PropTypes.bool,\n  /**\r\n   * Controls the modes of the cells.\r\n   */\n  cellModesModel: PropTypes.object,\n  /**\r\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\r\n   * @default false\r\n   */\n  checkboxSelection: PropTypes.bool,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * The character used to separate cell values when copying to the clipboard.\r\n   * @default '\\t'\r\n   */\n  clipboardCopyCellDelimiter: PropTypes.string,\n  /**\r\n   * Number of extra columns to be rendered before/after the visible slice.\r\n   * @default 3\r\n   */\n  columnBuffer: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n  /**\r\n   * Sets the height in pixel of the column headers in the grid.\r\n   * @default 56\r\n   */\n  columnHeaderHeight: PropTypes.number,\n  /**\r\n   * Set of columns of type [[GridColDef[]]].\r\n   */\n  columns: chainPropTypes(PropTypes.array.isRequired, props => {\n    // @ts-ignore because otherwise `build:api` doesn't work\n    if (props.columns && props.columns.some(column => column.resizable)) {\n      return new Error([`MUI: \\`column.resizable = true\\` is not a valid prop.`, 'Column resizing is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    return null;\n  }),\n  /**\r\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\r\n   * @default 3\r\n   */\n  columnThreshold: PropTypes.number,\n  /**\r\n   * Set the column visibility model of the grid.\r\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\r\n   */\n  columnVisibilityModel: PropTypes.object,\n  /**\r\n   * Overridable components.\r\n   * @deprecated Use `slots` instead.\r\n   */\n  components: PropTypes.object,\n  /**\r\n   * Overridable components props dynamically passed to the component at rendering.\r\n   * @deprecated Use the `slotProps` prop instead.\r\n   */\n  componentsProps: PropTypes.object,\n  /**\r\n   * Set the density of the grid.\r\n   * @default \"standard\"\r\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n  /**\r\n   * If `true`, column filters are disabled.\r\n   * @default false\r\n   */\n  disableColumnFilter: PropTypes.bool,\n  /**\r\n   * If `true`, the column menu is disabled.\r\n   * @default false\r\n   */\n  disableColumnMenu: PropTypes.bool,\n  /**\r\n   * If `true`, hiding/showing columns is disabled.\r\n   * @default false\r\n   */\n  disableColumnSelector: PropTypes.bool,\n  /**\r\n   * If `true`, the density selector is disabled.\r\n   * @default false\r\n   */\n  disableDensitySelector: PropTypes.bool,\n  /**\r\n   * If `true`, `eval()` is not used for performance optimization.\r\n   * @default false\r\n   * @ignore - do not document\r\n   */\n  disableEval: PropTypes.bool,\n  /**\r\n   * If `true`, the selection on click on a row or cell is disabled.\r\n   * @default false\r\n   */\n  disableRowSelectionOnClick: PropTypes.bool,\n  /**\r\n   * If `true`, the virtualization is disabled.\r\n   * @default false\r\n   */\n  disableVirtualization: PropTypes.bool,\n  /**\r\n   * Controls whether to use the cell or row editing.\r\n   * @default \"cell\"\r\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n  /**\r\n   * Unstable features, breaking changes might be introduced.\r\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\r\n   */\n  experimentalFeatures: PropTypes.shape({\n    ariaV7: PropTypes.bool,\n    columnGrouping: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n  /**\r\n   * The milliseconds delay to wait after a keystroke before triggering filtering.\r\n   * @default 150\r\n   */\n  filterDebounceMs: PropTypes.number,\n  /**\r\n   * Filtering can be processed on the server or client-side.\r\n   * Set it to 'server' if you would like to handle filtering on the server-side.\r\n   * @default \"client\"\r\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n  /**\r\n   * Set the filter model of the grid.\r\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      field: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operator: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })).isRequired,\n    logicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterExcludeHiddenColumns: PropTypes.bool,\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n  /**\r\n   * Forwarded props for the grid root element.\r\n   * @ignore - do not document.\r\n   */\n  forwardedProps: PropTypes.object,\n  /**\r\n   * Function that applies CSS classes dynamically on cells.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @returns {string} The CSS class to apply to the cell.\r\n   */\n  getCellClassName: PropTypes.func,\n  /**\r\n   * Function that returns the element to render in row detail.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @returns {React.JSX.Element} The row detail element.\r\n   */\n  getDetailPanelContent: PropTypes.func,\n  /**\r\n   * Function that returns the estimated height for a row.\r\n   * Only works if dynamic row height is used.\r\n   * Once the row height is measured this value is discarded.\r\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\r\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\r\n   */\n  getEstimatedRowHeight: PropTypes.func,\n  /**\r\n   * Function that applies CSS classes dynamically on rows.\r\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\r\n   * @returns {string} The CSS class to apply to the row.\r\n   */\n  getRowClassName: PropTypes.func,\n  /**\r\n   * Function that sets the row height per row.\r\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\r\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\r\n   */\n  getRowHeight: PropTypes.func,\n  /**\r\n   * Return the id of a given [[GridRowModel]].\r\n   */\n  getRowId: PropTypes.func,\n  /**\r\n   * Function that allows to specify the spacing between rows.\r\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\r\n   * @returns {GridRowSpacing} The row spacing values.\r\n   */\n  getRowSpacing: PropTypes.func,\n  /**\r\n   * If `true`, the footer component is hidden.\r\n   * @default false\r\n   */\n  hideFooter: PropTypes.bool,\n  /**\r\n   * If `true`, the pagination component in the footer is hidden.\r\n   * @default false\r\n   */\n  hideFooterPagination: PropTypes.bool,\n  /**\r\n   * If `true`, the selected row count in the footer is hidden.\r\n   * @default false\r\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n  /**\r\n   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\r\n   * E.g. when filter value is `cafe`, the rows with `café` will be visible.\r\n   * @default false\r\n   */\n  ignoreDiacritics: PropTypes.bool,\n  /**\r\n   * The initial state of the DataGrid.\r\n   * The data in it will be set in the state on initialization but will not be controlled.\r\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\r\n   */\n  initialState: PropTypes.object,\n  /**\r\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @returns {boolean} A boolean indicating if the cell is editable.\r\n   */\n  isCellEditable: PropTypes.func,\n  /**\r\n   * Determines if a row can be selected.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @returns {boolean} A boolean indicating if the cell is selectable.\r\n   */\n  isRowSelectable: PropTypes.func,\n  /**\r\n   * If `true`, the selection model will retain selected rows that do not exist.\r\n   * Useful when using server side pagination and row selections need to be retained\r\n   * when changing pages.\r\n   * @default false\r\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n  /**\r\n   * If `true`, a  loading overlay is displayed.\r\n   */\n  loading: PropTypes.bool,\n  /**\r\n   * Set the locale text of the grid.\r\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\r\n   */\n  localeText: PropTypes.object,\n  /**\r\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\r\n   * @default console\r\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n  /**\r\n   * Allows to pass the logging level or false to turn off logging.\r\n   * @default \"error\" (\"warn\" in dev mode)\r\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n  /**\r\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\r\n   */\n  nonce: PropTypes.string,\n  /**\r\n   * Callback fired when any cell is clicked.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellClick: PropTypes.func,\n  /**\r\n   * Callback fired when a double click event comes from a cell element.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellDoubleClick: PropTypes.func,\n  /**\r\n   * Callback fired when the cell turns to edit mode.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\r\n   */\n  onCellEditStart: PropTypes.func,\n  /**\r\n   * Callback fired when the cell turns to view mode.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\n  onCellEditStop: PropTypes.func,\n  /**\r\n   * Callback fired when a keydown event comes from a cell element.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellKeyDown: PropTypes.func,\n  /**\r\n   * Callback fired when the `cellModesModel` prop changes.\r\n   * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellModesModelChange: PropTypes.func,\n  /**\r\n   * Callback called when the data is copied to the clipboard.\r\n   * @param {string} data The data copied to the clipboard.\r\n   */\n  onClipboardCopy: PropTypes.func,\n  /**\r\n   * Callback fired when a click event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderClick: PropTypes.func,\n  /**\r\n   * Callback fired when a double click event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n  /**\r\n   * Callback fired when a mouse enter event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderEnter: PropTypes.func,\n  /**\r\n   * Callback fired when a mouse leave event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderLeave: PropTypes.func,\n  /**\r\n   * Callback fired when a mouseout event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderOut: PropTypes.func,\n  /**\r\n   * Callback fired when a mouseover event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderOver: PropTypes.func,\n  /**\r\n   * Callback fired when a column is reordered.\r\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnOrderChange: PropTypes.func,\n  /**\r\n   * Callback fired when the column visibility model changes.\r\n   * @param {GridColumnVisibilityModel} model The new model.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the Filter model changes before the filters are applied.\r\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onFilterModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the menu is closed.\r\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onMenuClose: PropTypes.func,\n  /**\r\n   * Callback fired when the menu is opened.\r\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onMenuOpen: PropTypes.func,\n  /**\r\n   * Callback fired when the pagination model has changed.\r\n   * @param {GridPaginationModel} model Updated pagination model.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onPaginationModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the preferences panel is closed.\r\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onPreferencePanelClose: PropTypes.func,\n  /**\r\n   * Callback fired when the preferences panel is opened.\r\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onPreferencePanelOpen: PropTypes.func,\n  /**\r\n   * Callback called when `processRowUpdate` throws an error or rejects.\r\n   * @param {any} error The error thrown.\r\n   */\n  onProcessRowUpdateError: PropTypes.func,\n  /**\r\n   * Callback fired when the grid is resized.\r\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onResize: PropTypes.func,\n  /**\r\n   * Callback fired when a row is clicked.\r\n   * Not called if the target clicked is an interactive element added by the built-in columns.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onRowClick: PropTypes.func,\n  /**\r\n   * Callback fired when a double click event comes from a row container element.\r\n   * @param {GridRowParams} params With all properties from [[RowParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onRowDoubleClick: PropTypes.func,\n  /**\r\n   * Callback fired when the row changes are committed.\r\n   * @param {GridRowId} id The row id.\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\n  onRowEditCommit: PropTypes.func,\n  /**\r\n   * Callback fired when the row turns to edit mode.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\r\n   */\n  onRowEditStart: PropTypes.func,\n  /**\r\n   * Callback fired when the row turns to view mode.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\n  onRowEditStop: PropTypes.func,\n  /**\r\n   * Callback fired when the `rowModesModel` prop changes.\r\n   * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onRowModesModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the selection state of one or multiple rows changes.\r\n   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onRowSelectionModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the sort model changes before a column is sorted.\r\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onSortModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the state of the grid is updated.\r\n   * @param {GridState} state The new state.\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   * @ignore - do not document.\r\n   */\n  onStateChange: PropTypes.func,\n  /**\r\n   * Select the pageSize dynamically using the component UI.\r\n   * @default [25, 50, 100]\r\n   */\n  pageSizeOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n  pagination: props => {\n    if (props.pagination === false) {\n      return new Error(['MUI: `<DataGrid pagination={false} />` is not a valid prop.', 'Infinite scrolling is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to disable the pagination.'].join('\\n'));\n    }\n    return null;\n  },\n  /**\r\n   * Pagination can be processed on the server or client-side.\r\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\r\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\r\n   * @default \"client\"\r\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n  /**\r\n   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\r\n   */\n  paginationModel: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired\n  }),\n  /**\r\n   * Callback called before updating a row with new values in the row and cell editing.\r\n   * @template R\r\n   * @param {R} newRow Row object with the new values.\r\n   * @param {R} oldRow Row object with the old values.\r\n   * @returns {Promise<R> | R} The final values to update the row.\r\n   */\n  processRowUpdate: PropTypes.func,\n  /**\r\n   * Number of extra rows to be rendered before/after the visible slice.\r\n   * @default 3\r\n   */\n  rowBuffer: PropTypes.number,\n  /**\r\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\r\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\r\n   */\n  rowCount: PropTypes.number,\n  /**\r\n   * Sets the height in pixel of a row in the grid.\r\n   * @default 52\r\n   */\n  rowHeight: PropTypes.number,\n  /**\r\n   * Controls the modes of the rows.\r\n   */\n  rowModesModel: PropTypes.object,\n  /**\r\n   * The milliseconds delay to wait after measuring the row height before recalculating row positions.\r\n   * Setting it to a lower value could be useful when using dynamic row height,\r\n   * but might reduce performance when displaying a large number of rows.\r\n   * @default 166\r\n   */\n  rowPositionsDebounceMs: PropTypes.number,\n  /**\r\n   * Set of rows of type [[GridRowsProp]].\r\n   */\n  rows: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /**\r\n   * If `false`, the row selection mode is disabled.\r\n   * @default true\r\n   */\n  rowSelection: PropTypes.bool,\n  /**\r\n   * Sets the row selection model of the grid.\r\n   */\n  rowSelectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n  /**\r\n   * Sets the type of space between rows added by `getRowSpacing`.\r\n   * @default \"margin\"\r\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n  /**\r\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\r\n   * @default 3\r\n   */\n  rowThreshold: PropTypes.number,\n  /**\r\n   * Override the height/width of the grid inner scrollbar.\r\n   */\n  scrollbarSize: PropTypes.number,\n  /**\r\n   * If `true`, the vertical borders of the cells are displayed.\r\n   * @default false\r\n   */\n  showCellVerticalBorder: PropTypes.bool,\n  /**\r\n   * If `true`, the right border of the column headers are displayed.\r\n   * @default false\r\n   */\n  showColumnVerticalBorder: PropTypes.bool,\n  /**\r\n   * Overridable components props dynamically passed to the component at rendering.\r\n   */\n  slotProps: PropTypes.object,\n  /**\r\n   * Overridable components.\r\n   */\n  slots: PropTypes.object,\n  /**\r\n   * Sorting can be processed on the server or client-side.\r\n   * Set it to 'client' if you would like to handle sorting on the client-side.\r\n   * Set it to 'server' if you would like to handle sorting on the server-side.\r\n   * @default \"client\"\r\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n  /**\r\n   * The order of the sorting sequence.\r\n   * @default ['asc', 'desc', null]\r\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n  /**\r\n   * Set the sort model of the grid.\r\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * If `true`, the grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\r\n   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\r\n   * @default false\r\n   */\n  unstable_ignoreValueFormatterDuringExport: PropTypes.oneOfType([PropTypes.shape({\n    clipboardExport: PropTypes.bool,\n    csvExport: PropTypes.bool\n  }), PropTypes.bool])\n};","map":{"version":3,"names":["_extends","React","PropTypes","chainPropTypes","GridBody","GridFooterPlaceholder","GridHeader","GridRoot","GridContextProvider","useDataGridComponent","useDataGridProps","DATA_GRID_PROPS_DEFAULT_VALUES","DataGridVirtualScroller","jsx","_jsx","jsxs","_jsxs","DataGridRaw","forwardRef","DataGrid","inProps","ref","props","privateApiRef","apiRef","children","className","style","sx","forwardedProps","VirtualScrollerComponent","memo","SUBMIT_FILTER_STROKE_TIME","filterDebounceMs","SUBMIT_FILTER_DATE_STROKE_TIME","propTypes","shape","current","object","isRequired","string","autoHeight","bool","autoPageSize","cellModesModel","checkboxSelection","classes","clipboardCopyCellDelimiter","columnBuffer","number","columnGroupingModel","arrayOf","columnHeaderHeight","columns","array","some","column","resizable","Error","join","columnThreshold","columnVisibilityModel","components","componentsProps","density","oneOf","disableColumnFilter","disableColumnMenu","disableColumnSelector","disableDensitySelector","disableEval","disableRowSelectionOnClick","disableVirtualization","editMode","experimentalFeatures","ariaV7","columnGrouping","warnIfFocusStateIsNotSynced","filterMode","filterModel","items","field","id","oneOfType","operator","value","any","logicOperator","quickFilterExcludeHiddenColumns","quickFilterLogicOperator","quickFilterValues","getCellClassName","func","getDetailPanelContent","getEstimatedRowHeight","getRowClassName","getRowHeight","getRowId","getRowSpacing","hideFooter","hideFooterPagination","hideFooterSelectedRowCount","ignoreDiacritics","initialState","isCellEditable","isRowSelectable","keepNonExistentRowsSelected","loading","localeText","logger","debug","error","info","warn","logLevel","nonce","onCellClick","onCellDoubleClick","onCellEditStart","onCellEditStop","onCellKeyDown","onCellModesModelChange","onClipboardCopy","onColumnHeaderClick","onColumnHeaderDoubleClick","onColumnHeaderEnter","onColumnHeaderLeave","onColumnHeaderOut","onColumnHeaderOver","onColumnOrderChange","onColumnVisibilityModelChange","onFilterModelChange","onMenuClose","onMenuOpen","onPaginationModelChange","onPreferencePanelClose","onPreferencePanelOpen","onProcessRowUpdateError","onResize","onRowClick","onRowDoubleClick","onRowEditCommit","onRowEditStart","onRowEditStop","onRowModesModelChange","onRowSelectionModelChange","onSortModelChange","onStateChange","pageSizeOptions","label","pagination","paginationMode","paginationModel","page","pageSize","processRowUpdate","rowBuffer","rowCount","rowHeight","rowModesModel","rowPositionsDebounceMs","rows","rowSelection","rowSelectionModel","rowSpacingType","rowThreshold","scrollbarSize","showCellVerticalBorder","showColumnVerticalBorder","slotProps","slots","sortingMode","sortingOrder","sortModel","sort","unstable_ignoreValueFormatterDuringExport","clipboardExport","csvExport"],"sources":["D:/Reactjs/T-DEV/material-library-git/node_modules/@mui/x-data-grid/DataGrid/DataGrid.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { chainPropTypes } from '@mui/utils';\r\nimport { GridBody, GridFooterPlaceholder, GridHeader, GridRoot } from '../components';\r\nimport { GridContextProvider } from '../context/GridContextProvider';\r\nimport { useDataGridComponent } from './useDataGridComponent';\r\nimport { useDataGridProps, DATA_GRID_PROPS_DEFAULT_VALUES } from './useDataGridProps';\r\nimport { DataGridVirtualScroller } from '../components/DataGridVirtualScroller';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst DataGridRaw = /*#__PURE__*/React.forwardRef(function DataGrid(inProps, ref) {\r\n  const props = useDataGridProps(inProps);\r\n  const privateApiRef = useDataGridComponent(props.apiRef, props);\r\n  return /*#__PURE__*/_jsx(GridContextProvider, {\r\n    privateApiRef: privateApiRef,\r\n    props: props,\r\n    children: /*#__PURE__*/_jsxs(GridRoot, _extends({\r\n      className: props.className,\r\n      style: props.style,\r\n      sx: props.sx,\r\n      ref: ref\r\n    }, props.forwardedProps, {\r\n      children: [/*#__PURE__*/_jsx(GridHeader, {}), /*#__PURE__*/_jsx(GridBody, {\r\n        VirtualScrollerComponent: DataGridVirtualScroller\r\n      }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\r\n    }))\r\n  });\r\n});\r\n/**\r\n * Demos:\r\n * - [DataGrid](https://mui.com/x/react-data-grid/demo/)\r\n *\r\n * API:\r\n * - [DataGrid API](https://mui.com/x/api/data-grid/data-grid/)\r\n */\r\nexport const DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\r\n\r\n/**\r\n * Remove at v7\r\n * @deprecated\r\n */\r\nexport const SUBMIT_FILTER_STROKE_TIME = DATA_GRID_PROPS_DEFAULT_VALUES.filterDebounceMs;\r\n\r\n/**\r\n * Remove at v7\r\n * @deprecated\r\n */\r\nexport const SUBMIT_FILTER_DATE_STROKE_TIME = DATA_GRID_PROPS_DEFAULT_VALUES.filterDebounceMs;\r\nDataGridRaw.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  /**\r\n   * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.\r\n   */\r\n  apiRef: PropTypes.shape({\r\n    current: PropTypes.object.isRequired\r\n  }),\r\n  /**\r\n   * The label of the grid.\r\n   */\r\n  'aria-label': PropTypes.string,\r\n  /**\r\n   * The id of the element containing a label for the grid.\r\n   */\r\n  'aria-labelledby': PropTypes.string,\r\n  /**\r\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\r\n   * @default false\r\n   */\r\n  autoHeight: PropTypes.bool,\r\n  /**\r\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\r\n   * @default false\r\n   */\r\n  autoPageSize: PropTypes.bool,\r\n  /**\r\n   * Controls the modes of the cells.\r\n   */\r\n  cellModesModel: PropTypes.object,\r\n  /**\r\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\r\n   * @default false\r\n   */\r\n  checkboxSelection: PropTypes.bool,\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\r\n  classes: PropTypes.object,\r\n  /**\r\n   * The character used to separate cell values when copying to the clipboard.\r\n   * @default '\\t'\r\n   */\r\n  clipboardCopyCellDelimiter: PropTypes.string,\r\n  /**\r\n   * Number of extra columns to be rendered before/after the visible slice.\r\n   * @default 3\r\n   */\r\n  columnBuffer: PropTypes.number,\r\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\r\n  /**\r\n   * Sets the height in pixel of the column headers in the grid.\r\n   * @default 56\r\n   */\r\n  columnHeaderHeight: PropTypes.number,\r\n  /**\r\n   * Set of columns of type [[GridColDef[]]].\r\n   */\r\n  columns: chainPropTypes(PropTypes.array.isRequired, props => {\r\n    // @ts-ignore because otherwise `build:api` doesn't work\r\n    if (props.columns && props.columns.some(column => column.resizable)) {\r\n      return new Error([`MUI: \\`column.resizable = true\\` is not a valid prop.`, 'Column resizing is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\r\n    }\r\n    return null;\r\n  }),\r\n  /**\r\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\r\n   * @default 3\r\n   */\r\n  columnThreshold: PropTypes.number,\r\n  /**\r\n   * Set the column visibility model of the grid.\r\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\r\n   */\r\n  columnVisibilityModel: PropTypes.object,\r\n  /**\r\n   * Overridable components.\r\n   * @deprecated Use `slots` instead.\r\n   */\r\n  components: PropTypes.object,\r\n  /**\r\n   * Overridable components props dynamically passed to the component at rendering.\r\n   * @deprecated Use the `slotProps` prop instead.\r\n   */\r\n  componentsProps: PropTypes.object,\r\n  /**\r\n   * Set the density of the grid.\r\n   * @default \"standard\"\r\n   */\r\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\r\n  /**\r\n   * If `true`, column filters are disabled.\r\n   * @default false\r\n   */\r\n  disableColumnFilter: PropTypes.bool,\r\n  /**\r\n   * If `true`, the column menu is disabled.\r\n   * @default false\r\n   */\r\n  disableColumnMenu: PropTypes.bool,\r\n  /**\r\n   * If `true`, hiding/showing columns is disabled.\r\n   * @default false\r\n   */\r\n  disableColumnSelector: PropTypes.bool,\r\n  /**\r\n   * If `true`, the density selector is disabled.\r\n   * @default false\r\n   */\r\n  disableDensitySelector: PropTypes.bool,\r\n  /**\r\n   * If `true`, `eval()` is not used for performance optimization.\r\n   * @default false\r\n   * @ignore - do not document\r\n   */\r\n  disableEval: PropTypes.bool,\r\n  /**\r\n   * If `true`, the selection on click on a row or cell is disabled.\r\n   * @default false\r\n   */\r\n  disableRowSelectionOnClick: PropTypes.bool,\r\n  /**\r\n   * If `true`, the virtualization is disabled.\r\n   * @default false\r\n   */\r\n  disableVirtualization: PropTypes.bool,\r\n  /**\r\n   * Controls whether to use the cell or row editing.\r\n   * @default \"cell\"\r\n   */\r\n  editMode: PropTypes.oneOf(['cell', 'row']),\r\n  /**\r\n   * Unstable features, breaking changes might be introduced.\r\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\r\n   */\r\n  experimentalFeatures: PropTypes.shape({\r\n    ariaV7: PropTypes.bool,\r\n    columnGrouping: PropTypes.bool,\r\n    warnIfFocusStateIsNotSynced: PropTypes.bool\r\n  }),\r\n  /**\r\n   * The milliseconds delay to wait after a keystroke before triggering filtering.\r\n   * @default 150\r\n   */\r\n  filterDebounceMs: PropTypes.number,\r\n  /**\r\n   * Filtering can be processed on the server or client-side.\r\n   * Set it to 'server' if you would like to handle filtering on the server-side.\r\n   * @default \"client\"\r\n   */\r\n  filterMode: PropTypes.oneOf(['client', 'server']),\r\n  /**\r\n   * Set the filter model of the grid.\r\n   */\r\n  filterModel: PropTypes.shape({\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n      field: PropTypes.string.isRequired,\r\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n      operator: PropTypes.string.isRequired,\r\n      value: PropTypes.any\r\n    })).isRequired,\r\n    logicOperator: PropTypes.oneOf(['and', 'or']),\r\n    quickFilterExcludeHiddenColumns: PropTypes.bool,\r\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\r\n    quickFilterValues: PropTypes.array\r\n  }),\r\n  /**\r\n   * Forwarded props for the grid root element.\r\n   * @ignore - do not document.\r\n   */\r\n  forwardedProps: PropTypes.object,\r\n  /**\r\n   * Function that applies CSS classes dynamically on cells.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @returns {string} The CSS class to apply to the cell.\r\n   */\r\n  getCellClassName: PropTypes.func,\r\n  /**\r\n   * Function that returns the element to render in row detail.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @returns {React.JSX.Element} The row detail element.\r\n   */\r\n  getDetailPanelContent: PropTypes.func,\r\n  /**\r\n   * Function that returns the estimated height for a row.\r\n   * Only works if dynamic row height is used.\r\n   * Once the row height is measured this value is discarded.\r\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\r\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\r\n   */\r\n  getEstimatedRowHeight: PropTypes.func,\r\n  /**\r\n   * Function that applies CSS classes dynamically on rows.\r\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\r\n   * @returns {string} The CSS class to apply to the row.\r\n   */\r\n  getRowClassName: PropTypes.func,\r\n  /**\r\n   * Function that sets the row height per row.\r\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\r\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\r\n   */\r\n  getRowHeight: PropTypes.func,\r\n  /**\r\n   * Return the id of a given [[GridRowModel]].\r\n   */\r\n  getRowId: PropTypes.func,\r\n  /**\r\n   * Function that allows to specify the spacing between rows.\r\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\r\n   * @returns {GridRowSpacing} The row spacing values.\r\n   */\r\n  getRowSpacing: PropTypes.func,\r\n  /**\r\n   * If `true`, the footer component is hidden.\r\n   * @default false\r\n   */\r\n  hideFooter: PropTypes.bool,\r\n  /**\r\n   * If `true`, the pagination component in the footer is hidden.\r\n   * @default false\r\n   */\r\n  hideFooterPagination: PropTypes.bool,\r\n  /**\r\n   * If `true`, the selected row count in the footer is hidden.\r\n   * @default false\r\n   */\r\n  hideFooterSelectedRowCount: PropTypes.bool,\r\n  /**\r\n   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\r\n   * E.g. when filter value is `cafe`, the rows with `café` will be visible.\r\n   * @default false\r\n   */\r\n  ignoreDiacritics: PropTypes.bool,\r\n  /**\r\n   * The initial state of the DataGrid.\r\n   * The data in it will be set in the state on initialization but will not be controlled.\r\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\r\n   */\r\n  initialState: PropTypes.object,\r\n  /**\r\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @returns {boolean} A boolean indicating if the cell is editable.\r\n   */\r\n  isCellEditable: PropTypes.func,\r\n  /**\r\n   * Determines if a row can be selected.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @returns {boolean} A boolean indicating if the cell is selectable.\r\n   */\r\n  isRowSelectable: PropTypes.func,\r\n  /**\r\n   * If `true`, the selection model will retain selected rows that do not exist.\r\n   * Useful when using server side pagination and row selections need to be retained\r\n   * when changing pages.\r\n   * @default false\r\n   */\r\n  keepNonExistentRowsSelected: PropTypes.bool,\r\n  /**\r\n   * If `true`, a  loading overlay is displayed.\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * Set the locale text of the grid.\r\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\r\n   */\r\n  localeText: PropTypes.object,\r\n  /**\r\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\r\n   * @default console\r\n   */\r\n  logger: PropTypes.shape({\r\n    debug: PropTypes.func.isRequired,\r\n    error: PropTypes.func.isRequired,\r\n    info: PropTypes.func.isRequired,\r\n    warn: PropTypes.func.isRequired\r\n  }),\r\n  /**\r\n   * Allows to pass the logging level or false to turn off logging.\r\n   * @default \"error\" (\"warn\" in dev mode)\r\n   */\r\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\r\n  /**\r\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\r\n   */\r\n  nonce: PropTypes.string,\r\n  /**\r\n   * Callback fired when any cell is clicked.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onCellClick: PropTypes.func,\r\n  /**\r\n   * Callback fired when a double click event comes from a cell element.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onCellDoubleClick: PropTypes.func,\r\n  /**\r\n   * Callback fired when the cell turns to edit mode.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\r\n   */\r\n  onCellEditStart: PropTypes.func,\r\n  /**\r\n   * Callback fired when the cell turns to view mode.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\r\n  onCellEditStop: PropTypes.func,\r\n  /**\r\n   * Callback fired when a keydown event comes from a cell element.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onCellKeyDown: PropTypes.func,\r\n  /**\r\n   * Callback fired when the `cellModesModel` prop changes.\r\n   * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onCellModesModelChange: PropTypes.func,\r\n  /**\r\n   * Callback called when the data is copied to the clipboard.\r\n   * @param {string} data The data copied to the clipboard.\r\n   */\r\n  onClipboardCopy: PropTypes.func,\r\n  /**\r\n   * Callback fired when a click event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onColumnHeaderClick: PropTypes.func,\r\n  /**\r\n   * Callback fired when a double click event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onColumnHeaderDoubleClick: PropTypes.func,\r\n  /**\r\n   * Callback fired when a mouse enter event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onColumnHeaderEnter: PropTypes.func,\r\n  /**\r\n   * Callback fired when a mouse leave event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onColumnHeaderLeave: PropTypes.func,\r\n  /**\r\n   * Callback fired when a mouseout event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onColumnHeaderOut: PropTypes.func,\r\n  /**\r\n   * Callback fired when a mouseover event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onColumnHeaderOver: PropTypes.func,\r\n  /**\r\n   * Callback fired when a column is reordered.\r\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onColumnOrderChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the column visibility model changes.\r\n   * @param {GridColumnVisibilityModel} model The new model.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onColumnVisibilityModelChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the Filter model changes before the filters are applied.\r\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onFilterModelChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the menu is closed.\r\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onMenuClose: PropTypes.func,\r\n  /**\r\n   * Callback fired when the menu is opened.\r\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onMenuOpen: PropTypes.func,\r\n  /**\r\n   * Callback fired when the pagination model has changed.\r\n   * @param {GridPaginationModel} model Updated pagination model.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onPaginationModelChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the preferences panel is closed.\r\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onPreferencePanelClose: PropTypes.func,\r\n  /**\r\n   * Callback fired when the preferences panel is opened.\r\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onPreferencePanelOpen: PropTypes.func,\r\n  /**\r\n   * Callback called when `processRowUpdate` throws an error or rejects.\r\n   * @param {any} error The error thrown.\r\n   */\r\n  onProcessRowUpdateError: PropTypes.func,\r\n  /**\r\n   * Callback fired when the grid is resized.\r\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onResize: PropTypes.func,\r\n  /**\r\n   * Callback fired when a row is clicked.\r\n   * Not called if the target clicked is an interactive element added by the built-in columns.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onRowClick: PropTypes.func,\r\n  /**\r\n   * Callback fired when a double click event comes from a row container element.\r\n   * @param {GridRowParams} params With all properties from [[RowParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onRowDoubleClick: PropTypes.func,\r\n  /**\r\n   * Callback fired when the row changes are committed.\r\n   * @param {GridRowId} id The row id.\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\r\n  onRowEditCommit: PropTypes.func,\r\n  /**\r\n   * Callback fired when the row turns to edit mode.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\r\n   */\r\n  onRowEditStart: PropTypes.func,\r\n  /**\r\n   * Callback fired when the row turns to view mode.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\r\n  onRowEditStop: PropTypes.func,\r\n  /**\r\n   * Callback fired when the `rowModesModel` prop changes.\r\n   * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onRowModesModelChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the selection state of one or multiple rows changes.\r\n   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onRowSelectionModelChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the sort model changes before a column is sorted.\r\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\r\n  onSortModelChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the state of the grid is updated.\r\n   * @param {GridState} state The new state.\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   * @ignore - do not document.\r\n   */\r\n  onStateChange: PropTypes.func,\r\n  /**\r\n   * Select the pageSize dynamically using the component UI.\r\n   * @default [25, 50, 100]\r\n   */\r\n  pageSizeOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\r\n    label: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired\r\n  })]).isRequired),\r\n  pagination: props => {\r\n    if (props.pagination === false) {\r\n      return new Error(['MUI: `<DataGrid pagination={false} />` is not a valid prop.', 'Infinite scrolling is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to disable the pagination.'].join('\\n'));\r\n    }\r\n    return null;\r\n  },\r\n  /**\r\n   * Pagination can be processed on the server or client-side.\r\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\r\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\r\n   * @default \"client\"\r\n   */\r\n  paginationMode: PropTypes.oneOf(['client', 'server']),\r\n  /**\r\n   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\r\n   */\r\n  paginationModel: PropTypes.shape({\r\n    page: PropTypes.number.isRequired,\r\n    pageSize: PropTypes.number.isRequired\r\n  }),\r\n  /**\r\n   * Callback called before updating a row with new values in the row and cell editing.\r\n   * @template R\r\n   * @param {R} newRow Row object with the new values.\r\n   * @param {R} oldRow Row object with the old values.\r\n   * @returns {Promise<R> | R} The final values to update the row.\r\n   */\r\n  processRowUpdate: PropTypes.func,\r\n  /**\r\n   * Number of extra rows to be rendered before/after the visible slice.\r\n   * @default 3\r\n   */\r\n  rowBuffer: PropTypes.number,\r\n  /**\r\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\r\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\r\n   */\r\n  rowCount: PropTypes.number,\r\n  /**\r\n   * Sets the height in pixel of a row in the grid.\r\n   * @default 52\r\n   */\r\n  rowHeight: PropTypes.number,\r\n  /**\r\n   * Controls the modes of the rows.\r\n   */\r\n  rowModesModel: PropTypes.object,\r\n  /**\r\n   * The milliseconds delay to wait after measuring the row height before recalculating row positions.\r\n   * Setting it to a lower value could be useful when using dynamic row height,\r\n   * but might reduce performance when displaying a large number of rows.\r\n   * @default 166\r\n   */\r\n  rowPositionsDebounceMs: PropTypes.number,\r\n  /**\r\n   * Set of rows of type [[GridRowsProp]].\r\n   */\r\n  rows: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  /**\r\n   * If `false`, the row selection mode is disabled.\r\n   * @default true\r\n   */\r\n  rowSelection: PropTypes.bool,\r\n  /**\r\n   * Sets the row selection model of the grid.\r\n   */\r\n  rowSelectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\r\n  /**\r\n   * Sets the type of space between rows added by `getRowSpacing`.\r\n   * @default \"margin\"\r\n   */\r\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\r\n  /**\r\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\r\n   * @default 3\r\n   */\r\n  rowThreshold: PropTypes.number,\r\n  /**\r\n   * Override the height/width of the grid inner scrollbar.\r\n   */\r\n  scrollbarSize: PropTypes.number,\r\n  /**\r\n   * If `true`, the vertical borders of the cells are displayed.\r\n   * @default false\r\n   */\r\n  showCellVerticalBorder: PropTypes.bool,\r\n  /**\r\n   * If `true`, the right border of the column headers are displayed.\r\n   * @default false\r\n   */\r\n  showColumnVerticalBorder: PropTypes.bool,\r\n  /**\r\n   * Overridable components props dynamically passed to the component at rendering.\r\n   */\r\n  slotProps: PropTypes.object,\r\n  /**\r\n   * Overridable components.\r\n   */\r\n  slots: PropTypes.object,\r\n  /**\r\n   * Sorting can be processed on the server or client-side.\r\n   * Set it to 'client' if you would like to handle sorting on the client-side.\r\n   * Set it to 'server' if you would like to handle sorting on the server-side.\r\n   * @default \"client\"\r\n   */\r\n  sortingMode: PropTypes.oneOf(['client', 'server']),\r\n  /**\r\n   * The order of the sorting sequence.\r\n   * @default ['asc', 'desc', null]\r\n   */\r\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\r\n  /**\r\n   * Set the sort model of the grid.\r\n   */\r\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\r\n    field: PropTypes.string.isRequired,\r\n    sort: PropTypes.oneOf(['asc', 'desc'])\r\n  })),\r\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\r\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\r\n  /**\r\n   * If `true`, the grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\r\n   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\r\n   * @default false\r\n   */\r\n  unstable_ignoreValueFormatterDuringExport: PropTypes.oneOfType([PropTypes.shape({\r\n    clipboardExport: PropTypes.bool,\r\n    csvExport: PropTypes.bool\r\n  }), PropTypes.bool])\r\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,QAAQ,EAAEC,qBAAqB,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,eAAe;AACrF,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,gBAAgB,EAAEC,8BAA8B,QAAQ,oBAAoB;AACrF,SAASC,uBAAuB,QAAQ,uCAAuC;AAC/E,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AACjD,MAAMC,WAAW,GAAG,aAAahB,KAAK,CAACiB,UAAU,CAAC,SAASC,QAAQA,CAACC,OAAO,EAAEC,GAAG,EAAE;EAChF,MAAMC,KAAK,GAAGZ,gBAAgB,CAACU,OAAO,CAAC;EACvC,MAAMG,aAAa,GAAGd,oBAAoB,CAACa,KAAK,CAACE,MAAM,EAAEF,KAAK,CAAC;EAC/D,OAAO,aAAaR,IAAI,CAACN,mBAAmB,EAAE;IAC5Ce,aAAa,EAAEA,aAAa;IAC5BD,KAAK,EAAEA,KAAK;IACZG,QAAQ,EAAE,aAAaT,KAAK,CAACT,QAAQ,EAAEP,QAAQ,CAAC;MAC9C0B,SAAS,EAAEJ,KAAK,CAACI,SAAS;MAC1BC,KAAK,EAAEL,KAAK,CAACK,KAAK;MAClBC,EAAE,EAAEN,KAAK,CAACM,EAAE;MACZP,GAAG,EAAEA;IACP,CAAC,EAAEC,KAAK,CAACO,cAAc,EAAE;MACvBJ,QAAQ,EAAE,CAAC,aAAaX,IAAI,CAACR,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,aAAaQ,IAAI,CAACV,QAAQ,EAAE;QACxE0B,wBAAwB,EAAElB;MAC5B,CAAC,CAAC,EAAE,aAAaE,IAAI,CAACT,qBAAqB,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,QAAQ,GAAG,aAAalB,KAAK,CAAC8B,IAAI,CAACd,WAAW,CAAC;;AAE5D;AACA;AACA;AACA;AACA,OAAO,MAAMe,yBAAyB,GAAGrB,8BAA8B,CAACsB,gBAAgB;;AAExF;AACA;AACA;AACA;AACA,OAAO,MAAMC,8BAA8B,GAAGvB,8BAA8B,CAACsB,gBAAgB;AAC7FhB,WAAW,CAACkB,SAAS,GAAG;EACtB;EACA;EACA;EACA;EACA;AACF;AACA;EACEX,MAAM,EAAEtB,SAAS,CAACkC,KAAK,CAAC;IACtBC,OAAO,EAAEnC,SAAS,CAACoC,MAAM,CAACC;EAC5B,CAAC,CAAC;EACF;AACF;AACA;EACE,YAAY,EAAErC,SAAS,CAACsC,MAAM;EAC9B;AACF;AACA;EACE,iBAAiB,EAAEtC,SAAS,CAACsC,MAAM;EACnC;AACF;AACA;AACA;EACEC,UAAU,EAAEvC,SAAS,CAACwC,IAAI;EAC1B;AACF;AACA;AACA;EACEC,YAAY,EAAEzC,SAAS,CAACwC,IAAI;EAC5B;AACF;AACA;EACEE,cAAc,EAAE1C,SAAS,CAACoC,MAAM;EAChC;AACF;AACA;AACA;EACEO,iBAAiB,EAAE3C,SAAS,CAACwC,IAAI;EACjC;AACF;AACA;EACEI,OAAO,EAAE5C,SAAS,CAACoC,MAAM;EACzB;AACF;AACA;AACA;EACES,0BAA0B,EAAE7C,SAAS,CAACsC,MAAM;EAC5C;AACF;AACA;AACA;EACEQ,YAAY,EAAE9C,SAAS,CAAC+C,MAAM;EAC9BC,mBAAmB,EAAEhD,SAAS,CAACiD,OAAO,CAACjD,SAAS,CAACoC,MAAM,CAAC;EACxD;AACF;AACA;AACA;EACEc,kBAAkB,EAAElD,SAAS,CAAC+C,MAAM;EACpC;AACF;AACA;EACEI,OAAO,EAAElD,cAAc,CAACD,SAAS,CAACoD,KAAK,CAACf,UAAU,EAAEjB,KAAK,IAAI;IAC3D;IACA,IAAIA,KAAK,CAAC+B,OAAO,IAAI/B,KAAK,CAAC+B,OAAO,CAACE,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,SAAS,CAAC,EAAE;MACnE,OAAO,IAAIC,KAAK,CAAC,CAAE,uDAAsD,EAAE,sDAAsD,EAAE,EAAE,EAAE,yFAAyF,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/O;IACA,OAAO,IAAI;EACb,CAAC,CAAC;EACF;AACF;AACA;AACA;EACEC,eAAe,EAAE1D,SAAS,CAAC+C,MAAM;EACjC;AACF;AACA;AACA;EACEY,qBAAqB,EAAE3D,SAAS,CAACoC,MAAM;EACvC;AACF;AACA;AACA;EACEwB,UAAU,EAAE5D,SAAS,CAACoC,MAAM;EAC5B;AACF;AACA;AACA;EACEyB,eAAe,EAAE7D,SAAS,CAACoC,MAAM;EACjC;AACF;AACA;AACA;EACE0B,OAAO,EAAE9D,SAAS,CAAC+D,KAAK,CAAC,CAAC,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;EAChE;AACF;AACA;AACA;EACEC,mBAAmB,EAAEhE,SAAS,CAACwC,IAAI;EACnC;AACF;AACA;AACA;EACEyB,iBAAiB,EAAEjE,SAAS,CAACwC,IAAI;EACjC;AACF;AACA;AACA;EACE0B,qBAAqB,EAAElE,SAAS,CAACwC,IAAI;EACrC;AACF;AACA;AACA;EACE2B,sBAAsB,EAAEnE,SAAS,CAACwC,IAAI;EACtC;AACF;AACA;AACA;AACA;EACE4B,WAAW,EAAEpE,SAAS,CAACwC,IAAI;EAC3B;AACF;AACA;AACA;EACE6B,0BAA0B,EAAErE,SAAS,CAACwC,IAAI;EAC1C;AACF;AACA;AACA;EACE8B,qBAAqB,EAAEtE,SAAS,CAACwC,IAAI;EACrC;AACF;AACA;AACA;EACE+B,QAAQ,EAAEvE,SAAS,CAAC+D,KAAK,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;EAC1C;AACF;AACA;AACA;EACES,oBAAoB,EAAExE,SAAS,CAACkC,KAAK,CAAC;IACpCuC,MAAM,EAAEzE,SAAS,CAACwC,IAAI;IACtBkC,cAAc,EAAE1E,SAAS,CAACwC,IAAI;IAC9BmC,2BAA2B,EAAE3E,SAAS,CAACwC;EACzC,CAAC,CAAC;EACF;AACF;AACA;AACA;EACET,gBAAgB,EAAE/B,SAAS,CAAC+C,MAAM;EAClC;AACF;AACA;AACA;AACA;EACE6B,UAAU,EAAE5E,SAAS,CAAC+D,KAAK,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;EACjD;AACF;AACA;EACEc,WAAW,EAAE7E,SAAS,CAACkC,KAAK,CAAC;IAC3B4C,KAAK,EAAE9E,SAAS,CAACiD,OAAO,CAACjD,SAAS,CAACkC,KAAK,CAAC;MACvC6C,KAAK,EAAE/E,SAAS,CAACsC,MAAM,CAACD,UAAU;MAClC2C,EAAE,EAAEhF,SAAS,CAACiF,SAAS,CAAC,CAACjF,SAAS,CAAC+C,MAAM,EAAE/C,SAAS,CAACsC,MAAM,CAAC,CAAC;MAC7D4C,QAAQ,EAAElF,SAAS,CAACsC,MAAM,CAACD,UAAU;MACrC8C,KAAK,EAAEnF,SAAS,CAACoF;IACnB,CAAC,CAAC,CAAC,CAAC/C,UAAU;IACdgD,aAAa,EAAErF,SAAS,CAAC+D,KAAK,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7CuB,+BAA+B,EAAEtF,SAAS,CAACwC,IAAI;IAC/C+C,wBAAwB,EAAEvF,SAAS,CAAC+D,KAAK,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACxDyB,iBAAiB,EAAExF,SAAS,CAACoD;EAC/B,CAAC,CAAC;EACF;AACF;AACA;AACA;EACEzB,cAAc,EAAE3B,SAAS,CAACoC,MAAM;EAChC;AACF;AACA;AACA;AACA;EACEqD,gBAAgB,EAAEzF,SAAS,CAAC0F,IAAI;EAChC;AACF;AACA;AACA;AACA;EACEC,qBAAqB,EAAE3F,SAAS,CAAC0F,IAAI;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,qBAAqB,EAAE5F,SAAS,CAAC0F,IAAI;EACrC;AACF;AACA;AACA;AACA;EACEG,eAAe,EAAE7F,SAAS,CAAC0F,IAAI;EAC/B;AACF;AACA;AACA;AACA;EACEI,YAAY,EAAE9F,SAAS,CAAC0F,IAAI;EAC5B;AACF;AACA;EACEK,QAAQ,EAAE/F,SAAS,CAAC0F,IAAI;EACxB;AACF;AACA;AACA;AACA;EACEM,aAAa,EAAEhG,SAAS,CAAC0F,IAAI;EAC7B;AACF;AACA;AACA;EACEO,UAAU,EAAEjG,SAAS,CAACwC,IAAI;EAC1B;AACF;AACA;AACA;EACE0D,oBAAoB,EAAElG,SAAS,CAACwC,IAAI;EACpC;AACF;AACA;AACA;EACE2D,0BAA0B,EAAEnG,SAAS,CAACwC,IAAI;EAC1C;AACF;AACA;AACA;AACA;EACE4D,gBAAgB,EAAEpG,SAAS,CAACwC,IAAI;EAChC;AACF;AACA;AACA;AACA;EACE6D,YAAY,EAAErG,SAAS,CAACoC,MAAM;EAC9B;AACF;AACA;AACA;AACA;EACEkE,cAAc,EAAEtG,SAAS,CAAC0F,IAAI;EAC9B;AACF;AACA;AACA;AACA;EACEa,eAAe,EAAEvG,SAAS,CAAC0F,IAAI;EAC/B;AACF;AACA;AACA;AACA;AACA;EACEc,2BAA2B,EAAExG,SAAS,CAACwC,IAAI;EAC3C;AACF;AACA;EACEiE,OAAO,EAAEzG,SAAS,CAACwC,IAAI;EACvB;AACF;AACA;AACA;EACEkE,UAAU,EAAE1G,SAAS,CAACoC,MAAM;EAC5B;AACF;AACA;AACA;EACEuE,MAAM,EAAE3G,SAAS,CAACkC,KAAK,CAAC;IACtB0E,KAAK,EAAE5G,SAAS,CAAC0F,IAAI,CAACrD,UAAU;IAChCwE,KAAK,EAAE7G,SAAS,CAAC0F,IAAI,CAACrD,UAAU;IAChCyE,IAAI,EAAE9G,SAAS,CAAC0F,IAAI,CAACrD,UAAU;IAC/B0E,IAAI,EAAE/G,SAAS,CAAC0F,IAAI,CAACrD;EACvB,CAAC,CAAC;EACF;AACF;AACA;AACA;EACE2E,QAAQ,EAAEhH,SAAS,CAAC+D,KAAK,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EACpE;AACF;AACA;EACEkD,KAAK,EAAEjH,SAAS,CAACsC,MAAM;EACvB;AACF;AACA;AACA;AACA;AACA;EACE4E,WAAW,EAAElH,SAAS,CAAC0F,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;EACEyB,iBAAiB,EAAEnH,SAAS,CAAC0F,IAAI;EACjC;AACF;AACA;AACA;AACA;EACE0B,eAAe,EAAEpH,SAAS,CAAC0F,IAAI;EAC/B;AACF;AACA;AACA;AACA;EACE2B,cAAc,EAAErH,SAAS,CAAC0F,IAAI;EAC9B;AACF;AACA;AACA;AACA;AACA;EACE4B,aAAa,EAAEtH,SAAS,CAAC0F,IAAI;EAC7B;AACF;AACA;AACA;AACA;EACE6B,sBAAsB,EAAEvH,SAAS,CAAC0F,IAAI;EACtC;AACF;AACA;AACA;EACE8B,eAAe,EAAExH,SAAS,CAAC0F,IAAI;EAC/B;AACF;AACA;AACA;AACA;AACA;EACE+B,mBAAmB,EAAEzH,SAAS,CAAC0F,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACEgC,yBAAyB,EAAE1H,SAAS,CAAC0F,IAAI;EACzC;AACF;AACA;AACA;AACA;AACA;EACEiC,mBAAmB,EAAE3H,SAAS,CAAC0F,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACEkC,mBAAmB,EAAE5H,SAAS,CAAC0F,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACEmC,iBAAiB,EAAE7H,SAAS,CAAC0F,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;EACEoC,kBAAkB,EAAE9H,SAAS,CAAC0F,IAAI;EAClC;AACF;AACA;AACA;AACA;AACA;EACEqC,mBAAmB,EAAE/H,SAAS,CAAC0F,IAAI;EACnC;AACF;AACA;AACA;AACA;EACEsC,6BAA6B,EAAEhI,SAAS,CAAC0F,IAAI;EAC7C;AACF;AACA;AACA;AACA;EACEuC,mBAAmB,EAAEjI,SAAS,CAAC0F,IAAI;EACnC;AACF;AACA;AACA;AACA;AACA;EACEwC,WAAW,EAAElI,SAAS,CAAC0F,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;EACEyC,UAAU,EAAEnI,SAAS,CAAC0F,IAAI;EAC1B;AACF;AACA;AACA;AACA;EACE0C,uBAAuB,EAAEpI,SAAS,CAAC0F,IAAI;EACvC;AACF;AACA;AACA;AACA;AACA;EACE2C,sBAAsB,EAAErI,SAAS,CAAC0F,IAAI;EACtC;AACF;AACA;AACA;AACA;AACA;EACE4C,qBAAqB,EAAEtI,SAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}